!===============================================================================
! SOLUTION OF PROBLEM
!===============================================================================

/SOLU

! Select everything
ALLSEL,ALL
! Number of nodes
*GET,node_count,NODE,,COUNT
! Number of elements
*GET,element_count,ELEM,,COUNT

*IF,analysis_type,EQ,steady_state,THEN
	! Steady-state analysis
	ANTYPE,STATIC,NEW
*ELSEIF,analysis_type,EQ,transient,THEN
	! Transient analysis
	ANTYPE,TRANS,NEW
*ENDIF

! Sparse solver
EQSLV,SPAR
! Solve using RAM
DSPOPTION,,INCORE
! Save all nodal data for every substep
OUTRES,ALL,ALL
! No non-linear effects
NLGEOM,OFF
! Full Newton-Raphson procedure
NROPT,FULL

!-------------------------------------------------------------------------------
! STEADY-STATE ANALYSIS
!-------------------------------------------------------------------------------

*IF,analysis_type,EQ,steady_state,THEN

	*IF,load_type,EQ,constant_voltage,THEN
		*SET,end_time_thermal,voltage_RMS
	*ELSEIF,load_type,EQ,constant_current,THEN
		*SET,end_time_thermal,current_RMS
	*ENDIF

	*SET,time_step_initial,end_time_thermal/10
	*SET,time_step_minimal,end_time_thermal/10
	*SET,time_step_maximal,end_time_thermal/10

	TIME,end_time_thermal
	DELTIM,time_step_initial,time_step_minimal,time_step_maximal,ON
	AUTOTS,FALSE

	! Solve
	/UIS,MSGPOP,3
	SOLVE
	FINISH
	/UIS,MSGPOP,0
*ENDIF

!-------------------------------------------------------------------------------
! TRANSIENT ANALYSIS WITH PRE-DEFINED LOAD
!-------------------------------------------------------------------------------

*IF,analysis_type,EQ,transient,AND,load_type,NE,temperature_control,THEN

	! Time stepping
	*SET,time_step_initial,1*second
	*SET,time_step_minimal,1*second
	*SET,time_step_maximal,1*minute
	*SET,end_time_thermal,heating_time

	! Stepped boundary condition
	KBC,1

	TIME,end_time_thermal
	DELTIM,time_step_initial,time_step_minimal,time_step_maximal,ON
	AUTOTS,TRUE

	! Solve
	/UIS,MSGPOP,3
	SOLVE
	FINISH
	/UIS,MSGPOP,0
*ENDIF

!-------------------------------------------------------------------------------
! TRANSIENT ANALYSIS WITH AUTOMATIC CONTROL
!-------------------------------------------------------------------------------

*IF,analysis_type,EQ,transient,AND,load_type,EQ,temperature_control,THEN

	! For restarts
	RESCONTROL,DEFINE,NONE,NONE,1,,XNNN

	! Available load range
	*SET,voltage_minimal,0.5*volt
	*SET,voltage_maximal,5.5*volt
	*SET,voltage_initial,MIN(1,(heating_rate/(500*kelvin/minute)))*voltage_maximal

	! Timing
	*SET,heating_time,(dwell_temperature-initial_temperature)/heating_rate
	*SET,dwell_time_start,heating_time
	*SET,dwell_time_end,dwell_time_start+dwell_time

	! PID controller
	*IF,machine_variant,EQ,Fritsch_monoforce,THEN
		*SET,parameter_Ku,0.010
		*SET,parameter_Tu,49
		*SET,parameter_Kp,0.6*parameter_Ku
		*SET,parameter_Ti,0.5*parameter_Tu
		*SET,parameter_Td,0.125*parameter_Tu
		*SET,parameter_Ki,1.2*parameter_Ku/parameter_Tu
		*SET,parameter_Kd,4*0.075*parameter_Ku*parameter_Tu
	*ELSEIF,machine_variant,EQ,Fritsch_triforce,THEN
		*SET,parameter_Ku,0.008
		*SET,parameter_Tu,32
		*SET,parameter_Kp,0.6*parameter_Ku
		*SET,parameter_Ti,0.5*parameter_Tu
		*SET,parameter_Td,0.125*parameter_Tu
		*SET,parameter_Ki,1.2*parameter_Ku/parameter_Tu
		*SET,parameter_Kd,0.075*parameter_Ku*parameter_Tu
	*ENDIF

	! Loop initiation
	*IF,heating_rate,GT,(500*kelvin/minute),THEN
		*SET,time_increment,1*second
	*ELSE
		*SET,time_increment,0.1*second
	*ENDIF
	*SET,time_increments_count,dwell_time_end/time_increment
	! Monitoring
	*DIM,heating_monitor,TABLE,time_increments_count,9
	! History variables
	*SET,temperature_was,initial_temperature
	*SET,error_was,0
	*SET,controller_output,0

	! Loop
	*DO,time_step,1,time_increments_count

		! Time at the end on new load step
		*SET,time_new,time_step*time_increment

		! Determine requested temperature
		*IF,time_new,LT,dwell_time_start,THEN
			! Heating phase
			*SET,temperature_should,initial_temperature+(time_new*heating_rate)
		*ELSE
			! Dwell phase
			*SET,temperature_should,dwell_temperature
		*ENDIF

		/SOLU
		*IF,time_step,EQ,1,THEN
			! New analysis in the first step
			ANTYPE,TRANS,NEW

			! Adjust load
			*SET,voltage_new,voltage_initial
		*ELSE
			! Save parameters before restart destroys them
			PARSAV,ALL,parameters,tmp
			! Continue from the last step
			ANTYPE,TRANS,RESTART,LAST,LAST,CONTINUE
			! Restore parameters
			PARRES,NEW,parameters,tmp

			! Adjust load
			*SET,voltage_old,voltage_new
			*SET,voltage_new,MAX(voltage_minimal,MIN(voltage_maximal,voltage_old+controller_output))
		*ENDIF

		! Change boundary conditions
		CMSEL,S,surface_load,NODE
		D,ALL,VOLT,voltage_new
		NSEL,ALL

		! Solve
		/UIS,MSGPOP,3
		KEYW,PR_SGUI,1
		TIME,time_new
		SOLVE
		KEYW,PR_SGUI,0
		/UIS,MSGPOP,0

		/POST1
		! Retrive new temperature
		*GET,temperature_is,NODE,node(die_diameter/2-probe_depth,0,0),TEMP
		! Calculate actual heating rate
		*SET,heating_rate_is,(temperature_is-temperature_was)/time_increment
		! Check temperature error
		*SET,error_is,temperature_should-temperature_is

		*IF,time_step,EQ,1,THEN
			! Cummulative error
			*SET,cumulative_error,error_is*time_new
			! Error change
			*SET,error_change,error_is/time_increment
		*ELSE
			! Cummulative error
			*SET,cumulative_error,cumulative_error+error_is
			! Error change
			*SET,error_change,(error_is-error_was)/time_increment
		*ENDIF

		! Log
		*SET,heating_monitor(time_step,0),time_new
		*SET,heating_monitor(time_step,1),temperature_should
		*SET,heating_monitor(time_step,2),temperature_is
		*SET,heating_monitor(time_step,3),heating_rate
		*SET,heating_monitor(time_step,4),heating_rate_is
		*SET,heating_monitor(time_step,5),error_is
		*SET,heating_monitor(time_step,6),error_change
		*SET,heating_monitor(time_step,7),cumulative_error
		*SET,heating_monitor(time_step,8),controller_output
		*SET,heating_monitor(time_step,9),voltage_new

		! Plot log
		! *VLEN,time_step
		! *VPLOT,heating_monitor(1,0),heating_monitor(1,1),2

		! Adjust controller output
		*SET,controller_output,parameter_Kp*error_is+parameter_Ki*cumulative_error+parameter_Kd*error_change

		! Make current state obsolete
		*SET,error_was,error_is
		*SET,temperature_was,temperature_is
	*ENDDO
*ENDIF

!-------------------------------------------------------------------------------
! OPTIONAL COOLDOWN
!-------------------------------------------------------------------------------

*IF,analysis_type,EQ,transient,AND,simulate_cooling,EQ,true,THEN

	/SOLU

	! Continue from the last step
	ANTYPE,TRANS,RESTART,LAST,LAST,CONTINUE

	! Increase time
	TIME,end_time_thermal*2

	! Delete all couplings
	CPDELE,ALL
	! Delete all currents
	FDELE,ALL,AMPS
	! No voltage
	D,ALL,VOLT,0

	! Solve
	/UIS,MSGPOP,3
	SOLVE
	FINISH
	/UIS,MSGPOP,0

*ENDIF